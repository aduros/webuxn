#!/usr/bin/env node
//
// Packages a rom into a self-contained html file

const fs = require("fs");
const path = require("path");

if (process.argv.length < 3) {
    console.error("Usage: rom2html ROM");
    process.exit(1);
}

const js = fs.readFileSync("build/webuxn.min.js");
const wasmBuffer = fs.readFileSync("build/webuxn.wasm");
const romBuffer = fs.readFileSync(process.argv[2]);

// Based on https://www.npmjs.com/package/z85
function encodeZ85 (buffer) {
    var extra =  buffer.length % 4;
    if (extra > 0) {
        buffer = Buffer.concat([buffer, Buffer.alloc(4-extra)]);
    }

    var encoder = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.-:+=^!/*?&<>()[]{}@%$#".split("");

    var str = "",
        byte_nbr = 0,
        size = buffer.length,
        value = 0;
    while (byte_nbr < size) {
        var characterCode = buffer[byte_nbr++];
        value = (value * 256) + characterCode;
        if ((byte_nbr % 4) == 0) {
            var divisor = 85 * 85 * 85 * 85;
            while (divisor >= 1) {
                var idx = Math.floor(value / divisor) % 85;
                str += encoder[idx];
                divisor /= 85;
            }
            value = 0
        }
    }

    return str;
}

function encodeJs (buffer) {
    return "decodeZ85(\""+encodeZ85(buffer)+"\", "+buffer.length+")";
}

console.log(`<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>${path.basename(process.argv[2])}</title>
  <style>
    html, body {
      height: 100%;
      margin: 0;
    }
    body {
      background: #0f0f0f;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    #screen {
      image-rendering: pixelated;
      image-rendering: crisp-edges;
      cursor: none;
      flex: 1;
      max-width: 768px;
      max-height: 512px;
    }
  </style>
</head>
<body>
  <canvas id="screen" width="384" height="256"></canvas>
  <script>
    ${js}
    const screenCanvas = document.getElementById("screen");
    function decodeZ85 (string, outputLength) {
        const decoder = [
            0x00, 0x44, 0x00, 0x54, 0x53, 0x52, 0x48, 0x00, 
            0x4B, 0x4C, 0x46, 0x41, 0x00, 0x3F, 0x3E, 0x45, 
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
            0x08, 0x09, 0x40, 0x00, 0x49, 0x42, 0x4A, 0x47, 
            0x51, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 
            0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 
            0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 
            0x3B, 0x3C, 0x3D, 0x4D, 0x00, 0x4E, 0x43, 0x00, 
            0x00, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 
            0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 
            0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 
            0x21, 0x22, 0x23, 0x4F, 0x00, 0x50, 0x00, 0x00
        ];
        let dest = new Uint8Array(outputLength),
            byte_nbr = 0,
            char_nbr = 0,
            value = 0;

        while (byte_nbr < outputLength) {
            var idx = string.charCodeAt(char_nbr++) - 32;
            value = (value * 85) + decoder[idx];
            if ((char_nbr % 5) == 0) {
                var divisor = 256 * 256 * 256;
                while (divisor >= 1) {
                    dest[byte_nbr++] = (value / divisor) | 0;
                    divisor >>= 8;
                }
                value = 0;
            }
        }
        return dest.buffer;
    }
    webuxn.run(${encodeJs(wasmBuffer)}, ${encodeJs(romBuffer)}, screenCanvas);
  </script>
</body>
</html>
</html>`);
